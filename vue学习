
第一篇：vue初始
Ⅰ、简单小巧的核心，渐进式的技术栈，足以应付任何规模的应用
Ⅱ、具有现代web开发常用的高级功能：解耦试图和数据、可复用的组件、前端路由、状态管理以及虚拟DOM

第二篇：vue的数据绑定
Ⅰ、使用new vue来创建一个新的vue实例，其中的el指的是在页面中已经存在的用来挂载实例的DOM
Ⅱ、vue的生命周期：vue的声明周期包含八个阶段，其中常用的有三个created（此阶段vue实例已经创建，数据尚未挂载，el还不可用）、mounted（el可用，页面的逻辑业务都写在这一块）、beforeDestroy(组件销毁时使用，主要用于解绑一些事件以及清除定时器)
【beforeCreate实例创建之前、created实例创建完成、beforeMount-el挂载之前、mounted挂在之后、beforeDestroy组件销毁之前、destroy组件销毁之后】
【
		备注----需要注意的是父子组件的生命周期顺序是:
		父组件beforeCreate-->父组件created-->父组件beforeMount-->子组件beforeCreate-->子组件created-->子组件beforeMount-->子组件Mounted-->父组件Mounted(父子组件加载渲染的过程)
		父组件beforeUpdate-->子组件beforeUpdate-->子组件updated-->父组件updated（子组件更新的过程）
		父组件beforeUpdate-->父组件updated（父组件更新的过程）
		父组件beforeDestroy-->子组件beforeDestroy-->子组件destroyed-->父组件destroyed（父子组件销毁的过程）
】
Ⅲ、插值表达式{{}}--使用vue的filter或者是computed对数据进行过滤
Ⅳ、指令和事件：v-if、v-show、v-html（会导致XSS攻击，需要将html进行转义，除非确信所使用的数据是可信的）、v-pre（跳过当前元素以及子元素的编译等）
Ⅴ、语法糖：v-bind和v-on分别使用:、@来代替

第三章：计算属性
Ⅰ、计算属性的特点：计算属性可以依赖其他的计算属性；计算属性不仅可以依赖当前vue实例的数据，还可以以来其他的vue实例的数据
Ⅱ、计算属性是基于它的依赖进行缓存的。当遍历大数组和做大量运算的时候，你需要使用计算属性，除非你不想得到缓存。

第四章：v-bind以及class和style
Ⅰ、v-bind可以使用语法糖:来代替，用于动态更新html属性的数据，如果绑定的数据不实用v-bind的话，那么在传递对象、数字和数组的时候，你得到的将会是一个字符串。
Ⅱ、class的绑定有两种 对象语法和数组语法
Ⅲ、style绑定的属性使用驼峰式命名或者是短横线分割的方式命名，还可以使用计算属性

第五章：基本指令
Ⅰ、v-cloak该指令不需要表达式，在vue实例编译完成以后会从html上移除，需要配合display:none一块使用。在简单的项目中会用到，如果是在工程化的项目当中的话就没有使用的必要了
Ⅱ、v-if v-else v-else-if:vue会根据当前条件是否为真来决定是否需要渲染组件或者是元素。vue出于效率的影响，会尽可能的复用以前的元素。如果在页面中有多个input的话，之前输入的内容可能存在。为了保持输入的唯一性，可以对input使用key
Ⅲ、v-show：用于显示/隐藏元素，与v-if之间的最大区别在于v-if才是真正的条件渲染，内存开销比较大。适合于不需要反复切换的场景。【对多个组件或者是元素使用条件指令的时候，可以使用template，这个元素在最后是不会被渲染出来的】
Ⅳ、列表渲染v-for：不仅可以对数组进行渲染，还可以对对象进行渲染，需要配合in来使用
Ⅴ、数组更新：vue的核心是数据和视图的双向绑定。当我们修改数组的时候，vue 会检测到数组的变化，所以用v-for渲染的视图也会发生变化。vue包含一组观察数组变化的方法，使用他们改变数组的同时也会触发视图的更新。这些方法分别是pop() push() shift() unshift() splice() reverse() sort()【有些方法是不会改变数组的，只会返回数组的一个副本，比如说filter slice concat】
Ⅵ、在vue当中，访问原生的事件使用的是$event。修饰符是一个小点，用于表示当前事件的作用范围。【.stop阻止事件冒泡 .prevent阻止浏览器默认的行为 .once事件只执行一次，同样适用于组件 .self事件只有作用于元素本身的时候才会触发回调函数 】
